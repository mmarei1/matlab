function [larrays, ldetails] = createLSTMModels(initializer, inputFeatureDimension, widthFactor)

    if ~ ( strcmp(initializer,"Glorot") ||  strcmp(initializer,"He") || strcmp(initializer,"narrow-normal"))
        warning("Initializer must be either Glorot, He or narrow-normal")
        initializer = "";
        ldetails = "";
        larrays = cell(1);
    else
        numFeatures = inputFeatureDimension;
        numHiddenUnits = 8*numFeatures;
        ldetails = sprintf("LSTM with 4 hidden-fc layers with %d hidden units, with %s weights initializer")
        larrays = [... 
            sequenceInputLayer(numFeatures,'Name','InputLayer1'),...
            lstmLayer(numHiddenUnits*widthFactor,'OutputMode','sequence','InputWeightsInitializer',initializer,'Name','LSTM_Layer1'),...
            fullyConnectedLayer(numHiddenUnits*widthFactor/2,'Name','FC_Layer1'),...
            lstmLayer(numHiddenUnits*widthFactor/2,'OutputMode','sequence','InputWeightsInitializer',initializer,'Name','LSTM_Layer2'),... 
            fullyConnectedLayer(numHiddenUnits*widthFactor/4,'Name','FC_Layer2'),...
            lstmLayer(numHiddenUnits*widthFactor/4,'OutputMode','sequence','InputWeightsInitializer',initializer,'Name','LSTM_Layer3'),... 
            fullyConnectedLayer(numHiddenUnits,'Name','FC_Layer3'),...
            lstmLayer(numHiddenUnits/2,'OutputMode','sequence','InputWeightsInitializer',initializer','Name','LSTM_Layer4'),... 
            fullyConnectedLayer(numResponses,'name','FC_Layer_FINAL'),...
            regressionLayer('Name','RegressionLayer'),...
            ];
    end
end
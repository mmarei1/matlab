function [Y,Xf,Af] = myNeuralNetworkFunctionFX(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 15-Aug-2018 13:14:29.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx7 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.015;300;1.5;5;150.72;3000;0.168];
x1_step1.gain = [13.2450331125828;0.00117647058823529;0.8;0.666666666666667;0.0199044585987261;0.001;1.93798449612403];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.72702555322177842;-1.3107585744371381686;1.2030324329394104232;0.64863352575698662861;0.92937145121900199829;-2.162777497253026926;-2.9880232427883872681];
IW1_1 = [0.9045372138575187293 -0.31324680623746092856 -0.18624055864001937133 -0.70008247217585695132 -0.71847423787223163583 -0.31965352930781831819 0.75251269156264599669;1.5189820387210895003 2.0624423680103141088 -0.03226976774482726712 -0.38991692187329379804 -1.4202278265429904014 -0.3747488398229819051 1.2164669015807247909;-1.1121295481923383353 0.87747487210789609779 -1.3391612812073578898 0.98289467322991819209 -0.20795392612943536248 -1.0531756215342014116 -0.24042797226641940411;1.2061202188874768915 -0.035632783448392060799 -0.044404398755878038418 0.11825928280972253237 -1.1906880947796349979 0.58432687206482514242 0.2043435508468803008;-0.042048469353277863336 0.45875494401406785583 2.7470729431796327979 1.3117855667519948693 -0.84685604842047856877 -1.3985146935019494574 -1.0058012843651085166;-0.023464669935167690312 1.8402463431096709456 0.62589746257484746295 1.1328137575639654067 -0.54150357794895598307 0.23551836282091573316 0.7422653429977874584;-0.84338322545026711552 -0.17286188736393037768 0.016200106186725647672 -0.93875797905782021324 -1.0818140034711674069 -0.13021326535360688847 -0.82017562939970067859];

% Layer 2
b2 = -0.85753701843236485036;
LW2_1 = [0.62053003352086355537 -0.84478229039899466191 0.18202220611265013117 0.86115261410442178747 -0.52986984238991785556 0.0070438656086048356472 -0.77743793284388895692];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.01;
y1_step1.xoffset = 40;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end

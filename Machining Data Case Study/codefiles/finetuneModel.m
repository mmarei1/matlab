% [finetunedModel,validationAccuracy] = finetuneModel(net_pretrained,ds_train,ds_val, opts_ft)
% returns a fine-tuned CNN model which is trained using the image
% datastores ds_train and ds_validation. The function also outputs the
% validation accuracy of the model by calculating the number of true
% predictions as a percentage of total predictions (in classification).
% 
% Pre-train network on dataset for some time to adapt the weights to those
% of the source domain
% 

function [finetunedModel, validationAccuracy] = finetuneModel(tmpNet,ds_train, ds_val)
try
    gd = gpuDevice();
    exEn = 'gpu';
catch
    warning("GPU Not present");
    exEn = 'cpu';
end
inputSize = tmpNet.Layers(1).InputSize;
pixelRange = [-20 20];
%rotRange = [-15 15];
scaleRange = [0.8 1.2];
imAug = imageDataAugmenter( ...
    'RandXReflection',true, ...
    'RandXTranslation',pixelRange, ...
    'RandYTranslation',pixelRange,...
    'RandRotation',pixelRange/2);
augimdsTrain = augmentedImageDatastore(inputSize(1:2),ds_train, ...
        'DataAugmentation',imAug);
augimdsValidation = augmentedImageDatastore(inputSize(1:2),ds_val);

% change validation dataset for finetuning on the augmented image datastore
opts_ft = trainingOptions('adam', ...
        'MiniBatchSize',16, ...
        'MaxEpochs',15, ...
        'LearnRateSchedule','piecewise',...
        'LearnRateDropPeriod',10,...
        'LearnRateDropFactor',0.9,...
        'InitialLearnRate',2e-4, ...
        'Shuffle','every-epoch', ...
        'ValidationData',augimdsValidation, ...
        'ValidationFrequency',10, ...
        'ValidationPatience',Inf, ...
        'Verbose',true, ...
        'Plots','training-progress',...
        'ExecutionEnvironment',exEn);
    
[finetunedModel, infoOut] = trainNetwork(augimdsTrain, tmpNet, opts_ft);

YActual = ds_val.Labels;
YPred = classify(finetunedModel,augimdsValidation);
tf = YPred == YActual;

correctPredictions = numel(find(tf));

validationAccuracy = correctPredictions/numel(YActual);

end